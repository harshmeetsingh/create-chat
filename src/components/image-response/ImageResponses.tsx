import { ChatMetaData } from "../chat-metadata/ChatMetaData";
import "./ImageResponse.css";
interface ImageResponsesProps {
  images: any;
  metaData: any;
  completeImageRender: () => void;
}

import { useEffect, useState } from "react";

const LazyLoadImage = ({ image, index, updateRenderComplete }: any) => {
  const [loaded, setLoaded] = useState(false);
  const handleLoaded = () => {
    updateRenderComplete(index);
    setLoaded(true);
  };
  return (
    <>
      <div className="response-image-container">
        <img
          src={image as string}
          key={index} // need to define a better string
          className={`response-image ${
            loaded ? "response-image-loaded" : "response-image-loading"
          }`}
          width={400}
          height={400}
          onLoad={handleLoaded}
        />
      </div>
    </>
  );
};

export const ImageResponses = ({
  images,
  metaData,
  completeImageRender,
}: ImageResponsesProps) => {
  const [renderComplete, setRenderComplete] = useState({});
  const updateRenderComplete = (indexKey: string) => {
    setRenderComplete((renderComplete) => ({
      ...renderComplete,
      [indexKey]: true,
    }));
  };

  useEffect(() => {
    if (Object.keys(renderComplete).length === 2) {
      completeImageRender();
    }
  }, [renderComplete]);

  return (
    <div>
      <div className="image-container">
        {Object.keys(images).map((entry) => (
          <div>
            <div className="image-metadata">{`Generated by: ${entry}`}</div>
            <LazyLoadImage
              image={images[entry]}
              index={entry}
              updateRenderComplete={updateRenderComplete}
            />
          </div>
        ))}
      </div>
      <ChatMetaData {...metaData} />
    </div>
  );
};
